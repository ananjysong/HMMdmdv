{
    "collab_server" : "",
    "contents" : "### to avoid underflow, use log scale for emission probabilities f1,f2,f3(case 1,2,4)\nf1<-function(x,y,nu,var,k,mu){\n  l1<-length(x)\n  l2<-length(y)\n  nun<-nu+l1+l2\n  kn<-k+l1+l2\n  xbar<-mean(x)\n  ybar<-mean(y)\n  xsq<-var(x)*(l1-1)\n  ysq<-var(y)*(l2-1)\n  nuvarn<-xsq+ysq+l1*xbar^2+l2*ybar^2+nu*var+k*mu^2-(l1*xbar+l2*ybar+k*mu)^2/(l1+l2+k)\n  nom<-gamma(nun/2)*sqrt(k)*(nu*var/2)^(nu/2)\n  denom1<-log(2*pi)*(l1+l2)/2\n  denom2<-log(gamma(nu/2)*sqrt(kn)*(nuvarn/2)^(nun/2))\n  return(log(nom)-denom1-denom2)\n}\n\n\n\nf2<-function(x,y,nu,var,k,mu){\n  l1<-length(x)\n  l2<-length(y)\n  xbar<-mean(x)\n  ybar<-mean(y)\n  xsq<-var(x)*(l1-1)\n  ysq<-var(y)*(l2-1)\n  nun<-nu+l1+l2\n  w1<-(l1*xbar+k*mu)^2/(l1+k)\n  w2<-(l2*ybar+k*mu)^2/(l2+k)\n  nuvarn<-xsq+ysq+nu*var+l1*xbar^2+l2*ybar^2+2*k*mu^2-w1-w2\n  nom<-k*gamma(nun/2)*(nu*var/2)^(nu/2)\n  denom2<-log(sqrt(l1+k)*sqrt(l2+k)*gamma(nu/2)*(nuvarn/2)^(nun/2))\n  denom1<-log(2*pi)*(l1+l2)/2\n  return(log(nom)-denom1-denom2)\n}\n\n\n\n\nf3<-function(x,y,nu,var,k,mu){\n  l1<-length(x)\n  l2<-length(y)\n  xbar<-mean(x)\n  ybar<-mean(y)\n  xsq<-var(x)*(l1-1)\n  ysq<-var(y)*(l2-1)\n  nun1<-nu+l1\n  nun2<-nu+l2\n  nuvarn1<-nu*var+xsq+l1*k*(xbar-mu)^2/(l1+k)\n  nuvarn2<-nu*var+ysq+l2*k*(ybar-mu)^2/(l2+k)\n  nom<-k*(nu*var/2)^nu*gamma(nun1/2)*gamma(nun2/2)\n  denom1<-log(2*pi)*(l1+l2)/2\n  denom2<-log(sqrt(l1+k)*sqrt(l2+k)*gamma(nu/2)^2*(nuvarn1/2)^(nun1/2)*(nuvarn2/2)^(nun2/2))\n  return(log(nom)-denom1-denom2)\n}\n\n\n\n\n#'Emission probabilities of the data\n#'\n#'Generate the emission densities of 4 hidden states for all test sites in the proposed hierarchical mixture model setting.\n#'@param nu The hyperparameter nu.\n#'@param var The hyperparameter var.\n#'@param k The hyperparameter k.\n#'@param mu The hyperparameter mu.\n#'@param A The input data.\n#'@param n1 The sample size of group 1.\n#'@param n2 The sample size of group 2.\n#'@return The data frame that has emission densities of 4 hidden states as columns and test sites as rows.\n#'@export\n\nemission_probs <- function(nu, var, k, mu, A, n1, n2){\n\n  data_df <- data.frame(A)\n\n  emission_analytical<-apply(data_df,1,function(x){\n    a<-f1(x[1:n1],x[(n1+1):(n1+n2)],nu,var,k,mu)\n    b<-f2(x[1:n1],x[(n1+1):(n1+n2)],nu,var,k,mu)\n    d<-f3(x[1:n1],x[(n1+1):(n1+n2)],nu,var,k,mu)\n    return(c(a,b,d))\n  })\n  emission_analytical <- t(emission_analytical)\n\n  n <- dim(A)[1]\n  emission_numeric <- rep(NA, n)\n  for (s in 1:n){\n    x<-as.numeric(data_df[s,])\n    fint<-function(t){\n      m1<-prod(dnorm(x[1:n1],t[2]/(1-t[2]^2),sqrt(t[3]/(1-t[3]))))\n      m2<-prod(dnorm(x[(n1+1):(n1+n2)],t[2]/(1-t[2]^2),sqrt(t[1]/(1-t[1]))))\n      m3<-dnorm(t[2]/(1-t[2]^2),mu,sqrt((t[3]/(1-t[3])+t[1]/(1-t[1]))/(4*k)))\n      m4<-(nu*var/2)^nu*exp(-(nu*var)/(2*t[3]/(1-t[3])))*exp(-(nu*var)/(2*t[1]/(1-t[1])))\n      m5<-gamma(nu/2)^2*(t[3]/(1-t[3]))^(1+nu/2)*(t[1]/(1-t[1]))^(1+nu/2)\n      m6<-(1+t[2]^2)/(1-t[2]^2)^2\n      m7<-1/(1-t[3])^2\n      m8<-1/(1-t[1])^2\n      m1*m2*m3*m4*m6*m7*m8/m5\n    }\n    emission_numeric[s] <- cubature::adaptIntegrate(fint,lowerLimit=c(0,-1,0),upperLimit=c(1,1,1),maxEval=5000)[1]$integral\n    emission_numeric[s] <- as.numeric(emission_numeric[s])\n  }\n\n  emission <- cbind(exp(emission_analytical[,1]), exp(emission_analytical[,2]), emission_numeric, exp(emission_analytical[,3]))\n  return(emission)\n}\n\n",
    "created" : 1512607892639.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "260117850",
    "id" : "4DD7B7F9",
    "lastKnownWriteTime" : 1512611611,
    "last_content_update" : 1512611611843,
    "path" : "~/HMMdmdv/R/emissionDensity.R",
    "project_path" : "R/emissionDensity.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}